is image main app dekho main form data se data rakh ker send karra hoon or location main app yeh get ki api run karo or option main location name do (https://e.de2solutions.com/mobile_dash/locations.php yeh response hai {
"status": "true",
"data": [
{
"loc_code": "001",
"location_name": "F- Building",
"delivery_address": "",
"phone": "",
"phone2": "",
"fax": "",
"email": "",
"contact": "",
"inactive": "0"
},
)  app ne form data se loc_code rakh ker send kerna hai user jiss name perbhi cick karay .
ord_date main date rakh ker send karoay.
trans_type = alaways 16 rakhay gi int main.
to_loc_code = main bhi location wali api hogi or wohi loc code aye ga.
purch_order_details = main app ek array bana ker data send karo gy q ke array min mutiple object product ke asaktay hai table se lakin yaad rakhna ke form data main rakh ker kam kerna hai json main nhi kerna q ke main ne php ka use kia hai.
memo  = main description hogi.
poduct main yeh api lagana https://e.de2solutions.com/mobile_dash/stock_master.php  or main ne example code main bhi product wala kma kia howa hai whan se bhi read ker lena 
jo kam app ke kerna hai yeh kam kuch is tarha ka hoga yeh exaple code hai milta jhulta (import React, {useState, useEffect} from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  TextInput,
  StyleSheet,
  ScrollView,
  ActivityIndicator,
  ToastAndroid,
} from 'react-native';
import Ionicons from 'react-native-vector-icons/Ionicons';
import {Dropdown} from 'react-native-element-dropdown';
import LinearGradient from 'react-native-linear-gradient';
import DateTimePicker from '@react-native-community/datetimepicker';
import axios from 'axios';

const COLORS = {
  WHITE: '#FFFFFF',
  BLACK: '#000000',
  Primary: '#1a1c22',
  Secondary: '#5a5c6a',
};

const adjustmentOptions = [
  {label: 'Positive', value: 0},
  {label: 'Negative', value: 1},
];

export default function InventoryAjustment({navigation}) {
  const [location, setLocation] = useState(null);
  const [locations, setLocations] = useState([]);

  const [date, setDate] = useState(new Date());
  const [showDate, setShowDate] = useState(false);
  const [adjustmentType, setAdjustmentType] = useState(0);

  const [product, setProduct] = useState(null);
  const [products, setProducts] = useState([]);
  const [searchProducts, setSearchProducts] = useState([]);

  const [qty, setQty] = useState('');
  const [unitCost, setUnitCost] = useState('');
  const [total, setTotal] = useState('0');
  const [memo, setMemo] = useState('');

  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(false);

  // Fetch Locations
  useEffect(() => {
    axios
      .get('https://e.de2solutions.com/mobile_dash/locations.php')
      .then(res => {
        if (res.data.status === 'true') {
          const formatted = res.data.data.map(loc => ({
            label: loc.location_name,
            value: loc.loc_code,
          }));
          setLocations(formatted);
        }
      })
      .catch(() =>
        ToastAndroid.show('Failed to load locations', ToastAndroid.SHORT),
      );
  }, []);

  // Fetch Products
  useEffect(() => {
    axios
      .get('https://e.de2solutions.com/mobile_dash/stock_master.php')
      .then(res => {
        if (res.data.status === 'true') {
          const formatted = res.data.data.map(p => ({
            label: p.description,
            value: p.stock_id,
          }));
          setProducts(formatted.slice(0, 10));
          setSearchProducts(formatted);
        }
      })
      .catch(() =>
        ToastAndroid.show('Failed to load products', ToastAndroid.SHORT),
      );
  }, []);

  // Auto calculate total
  useEffect(() => {
    const q = parseFloat(qty) || 0;
    const u = parseFloat(unitCost) || 0;
    setTotal((q * u).toString());
  }, [qty, unitCost]);

  const handleAdd = () => {
    if (!product || !qty || !unitCost) return;

    const selectedProduct = searchProducts.find(p => p.value === product);

    setItems(prev => [
      ...prev,
      {
        id: Date.now().toString(),
        productId: product,
        productName: selectedProduct?.label || '',
        qty,
        unitCost,
        total,
      },
    ]);

    setProduct(null);
    setQty('');
    setUnitCost('');
    setTotal('0');
  };

  const handleSubmit = async () => {
    if (!location || items.length === 0) {
      ToastAndroid.show(
        'Select location and add items first',
        ToastAndroid.SHORT,
      );
      return;
    }

    setLoading(true);

    try {
      // ‚úÖ FormData banao
      const form = new FormData();
      form.append('trans_type', String(17));
      form.append('ord_date', date.toISOString().split('T')[0]);
      form.append('loc_code', String(location));

      // ‚úÖ Items ko JSON banake bhejna hoga
      const details = items.map(itm => ({
        item_code: String(itm.productId),
        description: memo || itm.productName,
        quantity_ordered: Number(itm.qty),
        unit_price: Number(itm.unitCost),
        adjustment_type: Number(adjustmentType),
      }));

      form.append('purch_order_details', JSON.stringify(details));

      console.log('üì§ Final FormData:', {
        trans_type: 17,
        ord_date: date.toISOString().split('T')[0],
        loc_code: location,
        purch_order_details: details,
      });

      const res = await axios.post(
        'https://e.de2solutions.com/mobile_dash/post_service_purch_sale.php',
        form,
        {
          headers: {'Content-Type': 'multipart/form-data'},
        },
      );

      let parsed = res.data;
      if (typeof res.data === 'string') {
        try {
          const jsonStr = res.data.substring(res.data.lastIndexOf('{'));
          parsed = JSON.parse(jsonStr);
        } catch (e) {
          console.log('JSON parse error:', e);
        }
      }

      console.log('üì¶ Parsed Response:', parsed);

      if (
        parsed?.status === true ||
        parsed?.status === 'true' ||
        parsed?.status == 1
      ) {
        ToastAndroid.show(
          'Adjustment submitted successfully',
          ToastAndroid.LONG,
        );

        // ‚úÖ Reset all fields
        setItems([]);
        setMemo('');
        setLocation(null);
        setDate(new Date());
        setAdjustmentType(0);
        setProduct(null);
        setQty('');
        setUnitCost('');
        setTotal('0');
      } else {
        ToastAndroid.show(`Server rejected adjustment`, ToastAndroid.LONG);
      }
    } catch (err) {
      console.log('‚ùå Error:', err.response?.data || err.message);
      ToastAndroid.show('Submission failed', ToastAndroid.LONG);
    } finally {
      setLoading(false);
    }
  };

  return (
    <LinearGradient
      colors={[COLORS.Primary, COLORS.Secondary, COLORS.BLACK]}
      style={{flex: 1}}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <Ionicons name="chevron-back" color={COLORS.WHITE} size={28} />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Inventory Adjustment</Text>
        <View style={{width: 28}} />
      </View>

      <ScrollView contentContainerStyle={{padding: 20, paddingBottom: 100}}>
        <Text style={styles.sectionTitle}>Item Adjustments</Text>

        {/* Location */}
        <Dropdown
          style={styles.dropdown}
          data={locations}
          search
          labelField="label"
          valueField="value"
          placeholder="Select Location"
          value={location}
          onChange={item => setLocation(item.value)}
          placeholderStyle={{color: 'rgba(255,255,255,0.6)'}}
          selectedTextStyle={{color: COLORS.WHITE}}
          itemTextStyle={{color: COLORS.BLACK}}
        />

        {/* Date + Adjustment Type */}
        <View style={{flexDirection: 'row', gap: 12}}>
          <TouchableOpacity
            style={[styles.dropdown, {flex: 1, justifyContent: 'center'}]}
            onPress={() => setShowDate(true)}>
            <Text style={{color: COLORS.WHITE}}>
              {date.toISOString().split('T')[0]}
            </Text>
          </TouchableOpacity>

          <Dropdown
            style={[styles.dropdown, {flex: 1}]}
            data={adjustmentOptions}
            labelField="label"
            valueField="value"
            value={adjustmentType}
            onChange={item => setAdjustmentType(item.value)}
            placeholder="Adjust Type"
            placeholderStyle={{color: 'rgba(255,255,255,0.6)'}}
            selectedTextStyle={{color: COLORS.WHITE}}
            itemTextStyle={{color: COLORS.BLACK}}
          />
        </View>

        {showDate && (
          <DateTimePicker
            value={date}
            mode="date"
            display="default"
            onChange={(event, selected) => {
              setShowDate(false);
              if (selected) setDate(selected);
            }}
          />
        )}

        {/* Adjustment Detail */}
        <Text style={styles.sectionTitle}>Adjustment Detail</Text>

        {/* Table Header */}
        <View style={styles.tableHeader}>
          <Text style={styles.tableHeaderText}>Product</Text>
          <Text style={styles.tableHeaderText}>Qty</Text>
          <Text style={styles.tableHeaderText}>Unit Cost</Text>
          <Text style={styles.tableHeaderText}>Total</Text>
        </View>

        {/* Table Rows */}
        {items.map(row => (
          <View key={row.id} style={styles.tableRow}>
            <Text style={styles.tableText}>{row.productName}</Text>
            <Text style={styles.tableText}>{row.qty}</Text>
            <Text style={styles.tableText}>{row.unitCost}</Text>
            <Text style={styles.tableText}>{row.total}</Text>
          </View>
        ))}

        {/* Add Row */}
        <View style={{flexDirection: 'row', gap: 12, marginTop: 12}}>
          <Dropdown
            style={[styles.dropdown, {flex: 3}]}
            data={products}
            search
            searchPlaceholder="Search product..."
            labelField="label"
            valueField="value"
            value={product}
            onChange={item => setProduct(item.value)}
            onChangeText={val => {
              if (val.length > 1) setProducts(searchProducts);
            }}
            placeholder="Product"
            placeholderStyle={{color: 'rgba(255,255,255,0.6)'}}
            selectedTextStyle={{color: COLORS.WHITE}}
            itemTextStyle={{color: COLORS.BLACK}}
          />
          <TextInput
            style={[styles.textInput, {flex: 1}]}
            placeholder="Qty"
            placeholderTextColor="rgba(255,255,255,0.6)"
            keyboardType="numeric"
            value={qty}
            onChangeText={setQty}
          />
        </View>

        <View style={{flexDirection: 'row', gap: 12}}>
          <TextInput
            style={[styles.textInput, {flex: 1}]}
            placeholder="Unit Cost"
            placeholderTextColor="rgba(255,255,255,0.6)"
            keyboardType="numeric"
            value={unitCost}
            onChangeText={setUnitCost}
          />
          <View style={[styles.textInput, {flex: 1, justifyContent: 'center'}]}>
            <Text style={{color: COLORS.WHITE}}>{total}</Text>
          </View>
          <TouchableOpacity
            onPress={handleAdd}
            style={[styles.addBtn, {flex: 0.3}]}>
            <Ionicons name="add-circle" size={28} color={COLORS.WHITE} />
          </TouchableOpacity>
        </View>

        {/* Memo */}
        <TextInput
          style={[
            styles.textInput,
            {height: 100, textAlignVertical: 'top', marginTop: 10},
          ]}
          placeholder="Memo / Description"
          placeholderTextColor="rgba(255,255,255,0.6)"
          multiline
          value={memo}
          onChangeText={setMemo}
        />
      </ScrollView>

      {/* Bottom Button */}
      <View style={styles.bottomBar}>
        <TouchableOpacity
          style={styles.submitBtn}
          onPress={handleSubmit}
          disabled={loading}>
          {loading ? (
            <ActivityIndicator color={COLORS.WHITE} />
          ) : (
            <Text style={{color: COLORS.WHITE, fontSize: 18}}>
              Process Adjustment
            </Text>
          )}
        </TouchableOpacity>
      </View>
    </LinearGradient>
  );
}

const styles = StyleSheet.create({
  header: {
    height: 80,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    backgroundColor: 'rgba(255,255,255,0.05)',
    borderBottomWidth: 0.5,
    borderBottomColor: 'rgba(255,255,255,0.1)',
  },
  headerTitle: {color: '#fff', fontSize: 20, fontWeight: '700'},
  sectionTitle: {
    fontSize: 18,
    color: COLORS.WHITE,
    fontWeight: '700',
    marginBlock: 10,
  },
  dropdown: {
    height: 52,
    borderRadius: 10,
    paddingHorizontal: 12,
    backgroundColor: 'rgba(255,255,255,0.05)',
    borderWidth: 1,
    borderColor: 'rgba(255,255,255,0.1)',
    marginBottom: 7,
  },
  textInput: {
    height: 52,
    borderRadius: 10,
    paddingHorizontal: 12,
    backgroundColor: 'rgba(255,255,255,0.05)',
    borderWidth: 1,
    borderColor: 'rgba(255,255,255,0.1)',
    color: COLORS.WHITE,
    fontSize: 16,
  },
  tableHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    backgroundColor: 'rgba(255,255,255,0.1)',
    padding: 8,
    borderRadius: 6,
  },
  tableHeaderText: {
    flex: 1,
    color: COLORS.WHITE,
    fontWeight: '700',
    textAlign: 'center',
  },
  tableRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    padding: 8,
    borderBottomWidth: 0.5,
    borderBottomColor: 'rgba(255,255,255,0.2)',
  },
  tableText: {flex: 1, color: COLORS.WHITE, textAlign: 'center'},
  addBtn: {
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: COLORS.Secondary,
    borderRadius: 8,
  },
  bottomBar: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    padding: 16,
    backgroundColor: COLORS.Primary,
  },
  submitBtn: {
    height: 56,
    backgroundColor: COLORS.Secondary,
    borderRadius: 14,
    alignItems: 'center',
    justifyContent: 'center',
  },
});
)  or yeh code wo hai jiss maim app kam karo gay main ne banaya howa hai (import React, {useState} from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  TextInput,
  StyleSheet,
  ScrollView,
  Platform,
} from 'react-native';
import Ionicons from 'react-native-vector-icons/Ionicons';
import {Dropdown} from 'react-native-element-dropdown';
import LinearGradient from 'react-native-linear-gradient';
import DateTimePicker from '@react-native-community/datetimepicker';

const COLORS = {
  WHITE: '#FFFFFF',
  BLACK: '#000000',
  Primary: '#1a1c22',
  Secondary: '#5a5c6a',
};

const dropdownOptions = [
  {label: 'Option 1', value: '1'},
  {label: 'Option 2', value: '2'},
  {label: 'Option 3', value: '3'},
];

export default function LocationTransfer({navigation}) {
  const [fromLocation, setFromLocation] = useState(null);
  const [toLocation, setToLocation] = useState(null);
  const [date, setDate] = useState(new Date());
  const [showDate, setShowDate] = useState(false);

  const [product, setProduct] = useState(null);
  const [qty, setQty] = useState('');
  const [memo, setMemo] = useState('');

  const [items, setItems] = useState([]); // table data

  const handleAdd = () => {
    if (!product || !qty) return;

    setItems(prev => [
      ...prev,
      {
        id: Date.now().toString(),
        product,
        qty,
      },
    ]);

    // reset fields
    setProduct(null);
    setQty('');
  };

  const handleDelete = id => {
    setItems(prev => prev.filter(item => item.id !== id));
  };

  return (
    <LinearGradient
      colors={[COLORS.Primary, COLORS.Secondary, COLORS.BLACK]}
      style={{flex: 1}}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <Ionicons name="chevron-back" color={COLORS.WHITE} size={28} />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Inventory Ajustment</Text>
        <View style={{width: 28}} />
      </View>

      <ScrollView contentContainerStyle={{padding: 20, paddingBottom: 100}}>
        {/* Item Adjustments */}
        <Text style={styles.sectionTitle}>Item Adjustments</Text>

        {/* From Location */}
        <Dropdown
          style={styles.dropdown}
          data={dropdownOptions}
          search
          labelField="label"
          valueField="value"
          placeholder="From Location"
          placeholderStyle={{color: 'rgba(255,255,255,0.6)'}}
          selectedTextStyle={{color: COLORS.WHITE}}
          itemTextStyle={{color: COLORS.BLACK}}
          value={fromLocation}
          onChange={item => setFromLocation(item.value)}
        />

        {/* Date + To Location */}
        <View style={{flexDirection: 'row', gap: 12}}>
          {/* Date Picker */}
          <TouchableOpacity
            style={[styles.dropdown, {flex: 1, justifyContent: 'center'}]}
            onPress={() => setShowDate(true)}>
            <Text style={{color: COLORS.WHITE}}>
              {date.toISOString().split('T')[0]}
            </Text>
          </TouchableOpacity>

          {/* To Location */}
          <Dropdown
            style={[styles.dropdown, {flex: 1}]}
            data={dropdownOptions}
            labelField="label"
            valueField="value"
            placeholder="To Location"
            placeholderStyle={{color: 'rgba(255,255,255,0.6)'}}
            selectedTextStyle={{color: COLORS.WHITE}}
            itemTextStyle={{color: COLORS.BLACK}}
            value={toLocation}
            onChange={item => setToLocation(item.value)}
          />
        </View>

        {showDate && (
          <DateTimePicker
            value={date}
            mode="date"
            display="default"
            onChange={(event, selected) => {
              setShowDate(false);
              if (selected) setDate(selected);
            }}
          />
        )}

        {/* Adjustment Detail */}
        <Text style={styles.sectionTitle}>Adjustment Detail</Text>

        {/* Table Header */}
        <View style={styles.tableHeader}>
          <Text style={[styles.tableHeaderText, {flex: 7}]}>Product</Text>
          <Text style={[styles.tableHeaderText, {flex: 2}]}>Qty</Text>
          <Text style={[styles.tableHeaderText, {flex: 1}]}>Del</Text>
        </View>

        {/* Table Rows */}
        {items.map(row => (
          <View key={row.id} style={styles.tableRow}>
            <Text style={[styles.tableText, {flex: 7}]}>{row.product}</Text>
            <Text style={[styles.tableText, {flex: 2}]}>{row.qty}</Text>
            <TouchableOpacity
              style={{flex: 1, alignItems: 'center'}}
              onPress={() => handleDelete(row.id)}>
              <Ionicons name="trash" size={22} color="red" />
            </TouchableOpacity>
          </View>
        ))}

        {/* Form to add row */}
        <View style={{flexDirection: 'row', gap: 12, marginTop: 12}}>
          <Dropdown
            style={[styles.dropdown, {flex: 7}]}
            data={dropdownOptions}
            search
            labelField="label"
            valueField="value"
            placeholder="Product"
            placeholderStyle={{color: 'rgba(255,255,255,0.6)'}}
            selectedTextStyle={{color: COLORS.WHITE}}
            itemTextStyle={{color: COLORS.BLACK}}
            value={product}
            onChange={item => setProduct(item.value)}
          />
          <TextInput
            style={[styles.textInput, {flex: 2}]}
            placeholder="Qty"
            placeholderTextColor="rgba(255,255,255,0.6)"
            keyboardType="numeric"
            value={qty}
            onChangeText={setQty}
          />
          <TouchableOpacity
            onPress={handleAdd}
            style={[styles.addBtn, {flex: 1}]}>
            <Ionicons name="add-circle" size={28} color={COLORS.WHITE} />
          </TouchableOpacity>
        </View>

        {/* Memo */}
        <TextInput
          style={[
            styles.textInput,
            {height: 100, textAlignVertical: 'top', marginTop: 10},
          ]}
          placeholder="Memo / Description"
          placeholderTextColor="rgba(255,255,255,0.6)"
          multiline
          value={memo}
          onChangeText={setMemo}
        />
      </ScrollView>

      {/* Fixed Bottom Button */}
      <View style={styles.bottomBar}>
        <TouchableOpacity style={styles.submitBtn}>
          <Text style={{color: COLORS.WHITE, fontSize: 18}}>
            Process Adjustment
          </Text>
        </TouchableOpacity>
      </View>
    </LinearGradient>
  );
}

const styles = StyleSheet.create({
  header: {
    height: 80,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    backgroundColor: 'rgba(255,255,255,0.05)',
    borderBottomWidth: 0.5,
    borderBottomColor: 'rgba(255,255,255,0.1)',
  },
  headerTitle: {
    color: '#fff',
    fontSize: 20,
    fontWeight: '700',
  },
  sectionTitle: {
    fontSize: 18,
    color: COLORS.WHITE,
    fontWeight: '700',
    marginBlock: 10,
  },
  dropdown: {
    height: 52,
    borderRadius: 10,
    paddingHorizontal: 12,
    backgroundColor: 'rgba(255,255,255,0.05)',
    borderWidth: 1,
    borderColor: 'rgba(255,255,255,0.1)',
    marginBottom: 7,
  },
  textInput: {
    height: 52,
    borderRadius: 10,
    paddingHorizontal: 12,
    backgroundColor: 'rgba(255,255,255,0.05)',
    borderWidth: 1,
    borderColor: 'rgba(255,255,255,0.1)',
    color: COLORS.WHITE,
    fontSize: 16,
  },
  tableHeader: {
    flexDirection: 'row',
    backgroundColor: 'rgba(255,255,255,0.1)',
    padding: 8,
    borderRadius: 6,
  },
  tableHeaderText: {
    color: COLORS.WHITE,
    fontWeight: '700',
    textAlign: 'center',
  },
  tableRow: {
    flexDirection: 'row',
    padding: 8,
    borderBottomWidth: 0.5,
    borderBottomColor: 'rgba(255,255,255,0.2)',
    alignItems: 'center',
  },
  tableText: {
    color: COLORS.WHITE,
    textAlign: 'center',
  },
  addBtn: {
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: COLORS.Secondary,
    borderRadius: 8,
  },
  bottomBar: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    padding: 16,
    backgroundColor: COLORS.Primary,
  },
  submitBtn: {
    height: 56,
    backgroundColor: COLORS.Secondary,
    borderRadius: 14,
    alignItems: 'center',
    justifyContent: 'center',
  },
});
)   or meri post ki api ka resposne yeh ata hai postman per check kia hai (16INSERT INTO 0_stock_moves (stock_id, trans_no, type, loc_code,
tran_date, reference, qty, standard_cost, price,person_id,discount_percent,dimension_id) VALUES ('10087', '275',
16, 'DEF', '2025-09-21', 'LT002',
'-10', '','','','0','')INSERT INTO 0_stock_moves (stock_id, trans_no, type, loc_code,
tran_date, reference, qty, standard_cost, price,person_id,discount_percent,dimension_id) VALUES ('10087', '275',
16, 'SPL', '2025-09-21', 'LT002',
'10', '','','','0',''){
    "status": true
})